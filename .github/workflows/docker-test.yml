name: Docker Build & Test

on:
  pull_request:
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'package*.json'
      - 'next.config.mjs'
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - '.dockerignore'

jobs:
  docker-test:
    name: Docker Build & Security Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lint Dockerfile (Hadolint)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: coupleplan:test-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          load: true

      - name: Check image size
        run: |
          SIZE=$(docker images coupleplan:test-${{ github.sha }} --format "{{.Size}}")
          echo "📦 Image size: $SIZE"

          # Extract numeric value and unit
          SIZE_NUM=$(echo $SIZE | grep -oE '[0-9.]+')
          SIZE_UNIT=$(echo $SIZE | grep -oE '[A-Z]+')

          # Check if size > 500MB
          if [[ "$SIZE_UNIT" == "GB" ]]; then
            echo "❌ ERROR: Image size exceeds 500MB (actual: $SIZE)"
            exit 1
          elif [[ "$SIZE_UNIT" == "MB" ]]; then
            if (( $(echo "$SIZE_NUM > 500" | bc -l) )); then
              echo "❌ ERROR: Image size exceeds 500MB (actual: $SIZE)"
              exit 1
            fi
          fi

          echo "✅ Image size OK: $SIZE"

      - name: Run Trivy vulnerability scanner (warning only)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: coupleplan:test-${{ github.sha }}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

      - name: Fail on CRITICAL vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: coupleplan:test-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL'

      - name: Test container startup
        run: |
          echo "🐳 Starting container..."

          docker run -d -p 8080:8080 \
            -e NEXT_PUBLIC_SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }} \
            -e NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }} \
            -e SUPABASE_SERVICE_ROLE_KEY=${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }} \
            -e GEMINI_API_KEY=${{ secrets.STAGING_GEMINI_API_KEY }} \
            -e AI_PROVIDER=${{ secrets.STAGING_AI_PROVIDER }} \
            -e AI_MODEL=${{ secrets.STAGING_AI_MODEL }} \
            -e AI_MAX_TOKENS=${{ secrets.STAGING_AI_MAX_TOKENS }} \
            -e AI_TEMPERATURE=${{ secrets.STAGING_AI_TEMPERATURE }} \
            --name test-container \
            coupleplan:test-${{ github.sha }}

          echo "⏳ Waiting for container to be ready..."
          sleep 15

          echo "🔍 Testing health endpoint..."
          if curl -f http://localhost:8080/api/health; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            docker logs test-container
            exit 1
          fi

          echo "📊 Container logs:"
          docker logs test-container | head -n 50

          echo "🧹 Cleanup..."
          docker stop test-container
          docker rm test-container

      - name: Test summary
        if: always()
        run: |
          echo "## 🐳 Docker Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: coupleplan:test-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Hadolint**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Trivy Scan**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Test**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
