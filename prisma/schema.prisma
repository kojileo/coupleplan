generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザープロフィールテーブル
model Profile {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  email       String    @unique
  avatarUrl   String?   @map("avatar_url")
  bio         String?
  location    String?
  birthday    DateTime? @db.Date
  anniversary DateTime? @db.Date
  preferences Json      @default("{}")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // リレーション
  user1Couples Couple[] @relation("User1Couples")
  user2Couples Couple[] @relation("User2Couples")
  createdPlans DatePlan[]
  createdMemories Memory[]
  collaborationSessions CollaborationSession[]
  editHistory EditHistory[]

  @@map("profiles")
}

// カップル関係テーブル
model Couple {
  id        String   @id @default(uuid()) @db.Uuid
  user1Id   String   @map("user1_id") @db.Uuid
  user2Id   String   @map("user2_id") @db.Uuid
  status    String   @default("pending") // pending, accepted, blocked
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // リレーション
  user1         Profile            @relation("User1Couples", fields: [user1Id], references: [id])
  user2         Profile            @relation("User2Couples", fields: [user2Id], references: [id])
  datePlans     DatePlan[]
  relationshipPlans RelationshipPlan[]
  memories      Memory[]
  subscriptions Subscription[]

  @@unique([user1Id, user2Id])
  @@map("couples")
}

// デートプランテーブル
model DatePlan {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  description String?
  createdBy   String    @map("created_by") @db.Uuid
  coupleId    String    @map("couple_id") @db.Uuid
  status      String    @default("draft") // draft, completed, favorite, archived
  category    String?
  duration    String?
  budgetRange String?   @map("budget_range")
  rating      Decimal?  @db.Decimal(2, 1)
  tags        String[]
  isShared    Boolean   @default(false) @map("is_shared")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // リレーション
  creator           Profile              @relation(fields: [createdBy], references: [id])
  couple            Couple              @relation(fields: [coupleId], references: [id])
  planSpots         PlanSpot[]
  collaborationSessions CollaborationSession[]
  editHistory       EditHistory[]

  @@index([coupleId])
  @@index([createdBy])
  @@map("date_plans")
}

// プランスポットテーブル
model PlanSpot {
  id          String   @id @default(uuid()) @db.Uuid
  planId      String   @map("plan_id") @db.Uuid
  name        String
  type        String
  timeSlot    String?  @map("time_slot")
  description String?
  address     String?
  latitude    Decimal? @db.Decimal(10, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  cost        Decimal? @db.Decimal(10, 2)
  orderIndex  Int      @default(0) @map("order_index")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // リレーション
  plan DatePlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@map("plan_spots")
}

// 共同編集セッションテーブル
model CollaborationSession {
  id           String   @id @default(uuid()) @db.Uuid
  planId       String   @map("plan_id") @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  isActive     Boolean  @default(true) @map("is_active")
  lastActivity DateTime @default(now()) @map("last_activity") @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // リレーション
  plan DatePlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user Profile  @relation(fields: [userId], references: [id])

  @@map("collaboration_sessions")
}

// 編集履歴テーブル
model EditHistory {
  id          String   @id @default(uuid()) @db.Uuid
  planId      String   @map("plan_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  actionType  String   @map("action_type")
  contentDiff Json?    @map("content_diff")
  description String?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // リレーション
  plan DatePlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user Profile  @relation(fields: [userId], references: [id])

  @@map("edit_history")
}

// 関係修復プランテーブル
model RelationshipPlan {
  id         String    @id @default(uuid()) @db.Uuid
  coupleId   String    @map("couple_id") @db.Uuid
  planName   String    @map("plan_name")
  status     String    @default("active") // active, completed, paused
  progress   Int       @default(0) // 0-100
  startDate  DateTime  @default(now()) @map("start_date") @db.Timestamptz(6)
  endDate    DateTime? @map("end_date") @db.Timestamptz(6)
  goals      Json      @default("[]")
  activities Json      @default("[]")
  milestones Json      @default("[]")
  resources  Json      @default("[]")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // リレーション
  couple Couple @relation(fields: [coupleId], references: [id])

  @@map("relationship_plans")
}

// 思い出テーブル（Date Canvas用）
model Memory {
  id        String   @id @default(uuid()) @db.Uuid
  coupleId  String   @map("couple_id") @db.Uuid
  title     String
  content   String?
  category  String?
  tags      String[]
  location  String?
  latitude  Decimal? @db.Decimal(10, 8)
  longitude Decimal? @db.Decimal(11, 8)
  date      DateTime? @db.Date
  images    String[]
  createdBy String   @map("created_by") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // リレーション
  couple  Couple  @relation(fields: [coupleId], references: [id])
  creator Profile @relation(fields: [createdBy], references: [id])

  @@index([coupleId])
  @@map("memories")
}

// サブスクリプションテーブル
model Subscription {
  id              String    @id @default(uuid()) @db.Uuid
  coupleId        String    @map("couple_id") @db.Uuid
  planName        String    @map("plan_name")
  planId          String    @map("plan_id")
  status          String    // active, cancelled, past_due, unpaid
  price           Decimal   @db.Decimal(10, 2)
  currency        String    @default("JPY")
  billingCycle    String    @map("billing_cycle") // monthly, yearly
  nextBillingDate DateTime? @map("next_billing_date") @db.Timestamptz(6)
  features        Json      @default("[]")
  limits          Json      @default("{}")
  usage           Json      @default("{}")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // リレーション
  couple         Couple         @relation(fields: [coupleId], references: [id])
  paymentHistory PaymentHistory[]

  @@map("subscriptions")
}

// 支払い履歴テーブル
model PaymentHistory {
  id             String   @id @default(uuid()) @db.Uuid
  subscriptionId String   @map("subscription_id") @db.Uuid
  amount         Decimal  @db.Decimal(10, 2)
  currency       String   @default("JPY")
  status         String   // succeeded, failed, pending, cancelled
  paymentMethod  String?  @map("payment_method")
  transactionId  String?  @map("transaction_id")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // リレーション
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("payment_history")
}