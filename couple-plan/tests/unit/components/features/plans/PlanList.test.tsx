import { render, screen, waitFor } from '@testing-library/react';
import PlanList from '@/components/features/plans/PlanList';
import { useAuth } from '@/contexts/AuthContext';
import { api } from '@/lib/api';
import type { ExtendedPlan } from '@/types/plan';
import { TEST_USER, TEST_AUTH } from '@tests/utils/test-constants';

// useAuth„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('@/contexts/AuthContext', () => ({
  useAuth: jest.fn(),
}));

// api„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('@/lib/api', () => ({
  api: {
    plans: {
      list: jest.fn(),
    },
  },
}));

describe('PlanList', () => {
  const mockSession = {
    user: { id: TEST_USER.ID },
    access_token: TEST_AUTH.ACCESS_TOKEN,
  };

  const mockPlans: ExtendedPlan[] = [
    {
      id: '1',
      title: '„ÉÜ„Çπ„Éà„Éó„É©„É≥1',
      description: 'Ë™¨Êòé1',
      date: new Date('2024-01-01'),
      region: 'Êù±‰∫¨ÈÉΩ',
      budget: 10000,
      isPublic: false,
      isRecommended: false,
      category: '„Éá„Éº„Éà',
      userId: TEST_USER.ID,
      createdAt: new Date(),
      updatedAt: new Date(),
      locations: [
        {
          id: '1',
          name: '„ÉÜ„Çπ„ÉàÂ†¥ÊâÄ1',
          url: 'https://example.com/1',
          planId: '1',
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ],
      profile: {
        id: '1',
        name: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',
        email: 'test@example.com',
        userId: TEST_USER.ID,
        createdAt: new Date(),
        updatedAt: new Date(),
        isAdmin: false,
      },
      likes: [],
      _count: {
        likes: 0,
      },
    },
    {
      id: '2',
      title: '„ÉÜ„Çπ„Éà„Éó„É©„É≥2',
      description: 'Ë™¨Êòé2',
      date: new Date('2024-01-02'),
      region: 'Â§ßÈò™Â∫ú',
      budget: 20000,
      isPublic: true,
      isRecommended: false,
      category: 'ÊóÖË°å',
      userId: 'user2',
      createdAt: new Date(),
      updatedAt: new Date(),
      locations: [
        {
          id: '2',
          name: '„ÉÜ„Çπ„ÉàÂ†¥ÊâÄ2',
          url: 'https://example.com/2',
          planId: '2',
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ],
      profile: {
        id: '2',
        name: 'Âà•„ÅÆ„É¶„Éº„Ç∂„Éº',
        email: 'other@example.com',
        userId: 'user2',
        createdAt: new Date(),
        updatedAt: new Date(),
        isAdmin: false,
      },
      likes: [],
      _count: {
        likes: 0,
      },
    },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
    (useAuth as jest.Mock).mockReturnValue({ session: mockSession });
  });

  it('„É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„ÅØ„Çπ„Ç±„É´„Éà„É≥„ÇíË°®Á§∫„Åô„Çã', () => {
    (api.plans.list as jest.Mock).mockImplementation(
      () => new Promise(() => {}) // Ê∞∏Á∂öÁöÑ„Å™„Éö„É≥„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã
    );

    render(<PlanList />);

    expect(screen.getByTestId('loading-skeleton')).toBeInTheDocument();
  });

  it('„Éó„É©„É≥„Åå0‰ª∂„ÅÆÂ†¥Âêà„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„Å®‰ΩúÊàê„É™„É≥„ÇØ„ÇíË°®Á§∫„Åô„Çã', async () => {
    (api.plans.list as jest.Mock).mockResolvedValueOnce({ data: [] });

    render(<PlanList />);

    await waitFor(() => {
      expect(screen.getByText('„Åæ„Å†„Éó„É©„É≥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì')).toBeInTheDocument();
      expect(screen.getByText('Êñ∞„Åó„ÅÑ„Éó„É©„É≥„Çí‰ΩúÊàê„Åô„Çã')).toBeInTheDocument();
    });
  });

  it('„Éó„É©„É≥‰∏ÄË¶ß„ÇíË°®Á§∫„Åô„Çã', async () => {
    (api.plans.list as jest.Mock).mockResolvedValueOnce({ data: mockPlans });

    render(<PlanList />);

    await waitFor(() => {
      expect(screen.getByText('„ÉÜ„Çπ„Éà„Éó„É©„É≥1')).toBeInTheDocument();
      expect(screen.getByText('„ÉÜ„Çπ„Éà„Éó„É©„É≥2')).toBeInTheDocument();
      expect(screen.getByText('Ë™¨Êòé1')).toBeInTheDocument();
      expect(screen.getByText('Ë™¨Êòé2')).toBeInTheDocument();
      expect(screen.getByText('üí∞ 10,000ÂÜÜ')).toBeInTheDocument();
      expect(screen.getByText('üí∞ 20,000ÂÜÜ')).toBeInTheDocument();
    });
  });

  it('‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆ„Éó„É©„É≥„Å´„ÅØÂÖ¨Èñã„Éó„É©„É≥„Éê„ÉÉ„Ç∏„ÇíË°®Á§∫„Åô„Çã', async () => {
    (api.plans.list as jest.Mock).mockResolvedValueOnce({ data: mockPlans });

    render(<PlanList />);

    await waitFor(() => {
      expect(screen.getByText('ÂÖ¨Èñã„Éó„É©„É≥')).toBeInTheDocument();
    });
  });

  it('API„Ç®„É©„ÉºÊôÇ„Å´„Ç≥„É≥„ÇΩ„Éº„É´„Ç®„É©„Éº„ÇíÂá∫Âäõ„Åô„Çã', async () => {
    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
    (api.plans.list as jest.Mock).mockRejectedValueOnce(new Error('API Error'));

    render(<PlanList />);

    await waitFor(() => {
      expect(consoleSpy).toHaveBeenCalledWith('„Éû„Ç§„Éó„É©„É≥‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó:', expect.any(Error));
    });

    consoleSpy.mockRestore();
  });

  it('„Çª„ÉÉ„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥Âêà„ÄÅ‰Ωï„ÇÇË°®Á§∫„Åó„Å™„ÅÑ', async () => {
    (useAuth as jest.Mock).mockReturnValue({ session: null });

    render(<PlanList />);

    // „É≠„Éº„Éá„Ç£„É≥„Ç∞„ÅåÁµÇ„Çè„Çã„ÅÆ„ÇíÂæÖ„Å§
    await waitFor(() => {
      expect(screen.queryByTestId('loading-skeleton')).not.toBeInTheDocument();
    });

    // API„ÅåÂëº„Å∞„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(api.plans.list).not.toHaveBeenCalled();

    // ‰Ωï„ÇÇË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™çÔºà„Åæ„Åü„ÅØÈÅ©Âàá„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºâ
    expect(screen.queryByText('„Åæ„Å†„Éó„É©„É≥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì')).toBeInTheDocument();
  });

  it('„Éó„É©„É≥„ÅÆË©≥Á¥∞ÊÉÖÂ†±ÔºàÊó•‰ªò„ÄÅÂ†¥ÊâÄÔºâ„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã', async () => {
    (api.plans.list as jest.Mock).mockResolvedValueOnce({ data: mockPlans });

    // Date.prototype.toLocaleDateString„Çí„É¢„ÉÉ„ÇØ
    const originalToLocaleDateString = Date.prototype.toLocaleDateString;
    const mockToLocaleDateString = jest.fn().mockImplementation(function (this: Date) {
      if (this.toISOString().includes('2024-01-01')) {
        return '2024/1/1';
      } else if (this.toISOString().includes('2024-01-02')) {
        return '2024/1/2';
      }
      return originalToLocaleDateString.apply(this);
    });

    // @ts-ignore - TypeScript„ÅÆÂûã„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÁÑ°Ë¶ñ
    Date.prototype.toLocaleDateString = mockToLocaleDateString;

    render(<PlanList />);

    await waitFor(() => {
      // „Çø„Ç§„Éà„É´„Å®Ë™¨Êòé„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(screen.getByText('„ÉÜ„Çπ„Éà„Éó„É©„É≥1')).toBeInTheDocument();
      expect(screen.getByText('„ÉÜ„Çπ„Éà„Éó„É©„É≥2')).toBeInTheDocument();
      expect(screen.getByText('Ë™¨Êòé1')).toBeInTheDocument();
      expect(screen.getByText('Ë™¨Êòé2')).toBeInTheDocument();

      // Êó•‰ªò„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºàüìÖ ÁµµÊñáÂ≠ó„ÇíÂê´„ÇÄÔºâ
      expect(screen.getByText(/2024\/1\/1/)).toBeInTheDocument();
      expect(screen.getByText(/2024\/1\/2/)).toBeInTheDocument();

      // ‰∫àÁÆó„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(screen.getByText(/10,000ÂÜÜ/)).toBeInTheDocument();
      expect(screen.getByText(/20,000ÂÜÜ/)).toBeInTheDocument();

      // Â†¥ÊâÄ„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(screen.getByText('„ÉÜ„Çπ„ÉàÂ†¥ÊâÄ1')).toBeInTheDocument();
      expect(screen.getByText('„ÉÜ„Çπ„ÉàÂ†¥ÊâÄ2')).toBeInTheDocument();
    });

    // „É¢„ÉÉ„ÇØ„ÇíÂÖÉ„Å´Êàª„Åô
    Date.prototype.toLocaleDateString = originalToLocaleDateString;
  });

  it('API„Åã„Çâ„Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ„ÅåËøî„Åï„Çå„ÅüÂ†¥Âêà„ÇíÂá¶ÁêÜ„Åô„Çã', async () => {
    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
    (api.plans.list as jest.Mock).mockResolvedValueOnce({ error: 'API Error' });

    render(<PlanList />);

    await waitFor(() => {
      expect(consoleSpy).toHaveBeenCalledWith('„Éû„Ç§„Éó„É©„É≥‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó:', expect.any(Error));
    });

    consoleSpy.mockRestore();
  });

  it('Ë™¨Êòé„Åå„Å™„ÅÑ„Éó„É©„É≥„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã', async () => {
    const plansWithoutDescription = [
      {
        ...mockPlans[0],
        description: '',
      },
    ];

    (api.plans.list as jest.Mock).mockResolvedValueOnce({ data: plansWithoutDescription });

    render(<PlanList />);

    await waitFor(() => {
      expect(screen.getByText('„ÉÜ„Çπ„Éà„Éó„É©„É≥1')).toBeInTheDocument();
      expect(screen.queryByText('Ë™¨Êòé1')).not.toBeInTheDocument();
    });
  });
});
